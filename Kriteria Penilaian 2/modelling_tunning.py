# -*- coding: utf-8 -*-
"""modelling_tunning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MzIiZ04VtAoGnZfXHNKKvZ15A7Y4qUj1
"""

!pip install "mlflow<3" dagshub pandas numpy scikit-learn

# kriteria-2/modelling_tuning.py
import dagshub, mlflow, mlflow.sklearn
import pandas as pd, numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, mean_absolute_percentage_error

# inisialisasi DAGsHub MLflow
dagshub.init(repo_owner='Raziffff', repo_name='Prediksi_Asuransi', mlflow=True)
mlflow.set_experiment("Penyesuaian_biaya_asuransi")

train_df = pd.read_csv("insurance_train_preprocessed.csv")
test_df  = pd.read_csv("insurance_test_preprocessed.csv")

X_train, y_train = train_df.drop(columns=["target"]), train_df["target"]
X_test,  y_test  = test_df.drop(columns=["target"]),  test_df["target"]

n_estimators_range = np.linspace(50, 500, 5, dtype=int)
max_depth_range    = np.linspace(5, 50, 5, dtype=int)

best_score, best_model = -np.inf, None

for n in n_estimators_range:
  for d in max_depth_range:
    with mlflow.start_run(run_name=f"rf_{n}_{d}"):
      model = RandomForestRegressor(n_estimators=n, max_depth=d, random_state=42, n_jobs=-1)
      model.fit(X_train, y_train)

      y_pred = model.predict(X_test)

      mse  = mean_squared_error(y_test, y_pred)
      mae  = mean_absolute_error(y_test, y_pred)
      mape = mean_absolute_percentage_error(y_test, y_pred)
      r2   = r2_score(y_test, y_pred)

      mlflow.log_params({"n_estimators": n, "max_depth": d})
      mlflow.log_metrics({"MSE": mse, "MAE": mae, "MAPE": mape, "R2": r2})

      if r2 > best_score:
          best_score = r2
          best_model = model
          mlflow.sklearn.log_model(
              sk_model=model,
              artifact_path="best_model",
              input_example=X_test.iloc[:1]
          )

print("Best R2:", best_score)